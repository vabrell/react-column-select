{"version":3,"file":"react-column-select.cjs.js","sources":["../src/components/container/container.style.ts","../src/components/column/column.style.ts","../src/components/column/column.tsx","../src/components/option/option.style.ts","../src/components/option/option.tsx","../src/components/button/button.styles.ts","../src/components/button/button.tsx","../src/components/icons/UpIcon.tsx","../src/components/icons/DownIcon.tsx","../src/components/container/container.tsx","../src/ColumnSelect.tsx"],"sourcesContent":["import styled from '@emotion/styled'\nimport type { Theme } from '../../types'\n\nexport const Grid = styled.div`\n  display: grid;\n  gap: 0.5rem;\n  grid-template-columns: repeat(1, 5fr);\n  grid-template-areas: 'a' 'd' 'b' 'c' 'e';\n  &,\n  & * {\n    box-sizing: border-box;\n  }\n\n  @media (min-width: 600px) {\n    grid-template-columns: repeat(2, 2fr) 95px repeat(2, 2fr);\n    grid-template-areas: 'a a b c c' 'd d b e e';\n  }\n`\n\nexport const GridItemHeaderLeft = styled.div<{ theme: Theme }>`\n  grid-area: a;\n  display: flex;\n  align-items: center;\n  padding: 0.75rem;\n  background-color: ${({ theme }) => theme.headerBgColor};\n  position: relative;\n\n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 10px;\n    right: 10px;\n    height: 1px;\n    background-color: ${({ theme }) => theme.columnBorderColor};\n  }\n`\n\nexport const GridItemHeaderRight = styled.div<{ theme: Theme }>`\n  grid-area: c;\n  display: flex;\n  align-items: center;\n  padding: 0.75rem;\n  background-color: ${({ theme }) => theme.headerBgColor};\n  position: relative;\n\n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 10px;\n    right: 10px;\n    height: 1px;\n    background-color: ${({ theme }) => theme.columnBorderColor};\n  }\n`\n\nexport const GridItemCenter = styled.div`\n  grid-area: b;\n  align-self: center;\n`\n\nexport const GridItemColumnLeft = styled.div<{ theme: Theme }>`\n  grid-area: d;\n  border: 1px solid ${({ theme }) => theme.columnBorderColor};\n  border-radius: 2px;\n`\n\nexport const GridItemColumnRight = styled.div<{ theme: Theme }>`\n  grid-area: e;\n  border: 1px solid ${({ theme }) => theme.columnBorderColor};\n  border-radius: 2px;\n`\n\nexport const Input = styled.input<{ theme: Theme }>`\n  width: 100%;\n  min-width: 0;\n  height: 2rem;\n  border: 0;\n  outline: 0;\n  border-radius: 0.125rem;\n  appearance: none;\n  font-size: 0.875rem;\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n  transition: all 0.2s;\n\n  &:focus {\n    z-index: 1;\n    border-color: ${({ theme }) => theme.searchFocusBorderColor};\n    box-shadow: 0 0 0 1px ${({ theme }) => theme.searchFocusBorderColor};\n  }\n\n  &:hover: {\n    border-color: #cbd5e0;\n  }\n`\n\nexport const Text = styled.p`\n  font-weight: 600;\n  font-size: 1em;\n  margin: 0;\n`\n","import styled from '@emotion/styled'\n\nexport const VStack = styled.div<{ isSearchable: boolean }>`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  border-top-width: ${({ isSearchable }) => (isSearchable ? 'thin' : '0')};\n  border-top-style: solid;\n  border-color: inherit;\n  overflow-y: auto;\n  height: 20rem;\n`\n","import React, { FC, ReactNode } from 'react'\nimport { VStack } from './column.style'\n\ninterface ColumnProps {\n  /**\n   * HTML Id.\n   */\n  id: string\n  /**\n   * Enable to make the columns searchable.\n   */\n  isSearchable: boolean\n  /**\n   * The children of the column.\n   * @type ReactNode\n   */\n  children: ReactNode\n}\n\nconst Column: FC<ColumnProps> = ({ id, isSearchable, children }) => {\n  return (\n    <VStack id={id} isSearchable={isSearchable}>\n      {children}\n    </VStack>\n  )\n}\n\nexport default Column\n","import styled from '@emotion/styled'\nimport { Theme } from '../../types'\n\nexport const Row = styled.button<{ isSelected: boolean; theme: Theme }>`\n  margin: 0;\n  padding: 1rem 0.5rem;\n  background-color: ${({ isSelected }) =>\n    isSelected ? ({ theme }) => theme.optionSelectedBgColor : 'transparent'};\n  text-align: left;\n  border: 0;\n  user-select: none;\n  cursor: pointer;\n\n  &:first-of-type {\n    margin-top: 1rem;\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.optionHoverBgColor};\n  }\n`\n","import React, { FC } from 'react'\nimport { OptionType, Theme } from '../../types'\nimport { Row } from './option.style'\n\ninterface OptionProps {\n  /**\n   * The label of the option.\n   */\n  label: OptionType['label']\n  /**\n   * Whether or not the option is currently selected.\n   * @type boolean\n   */\n  isSelected: boolean\n  /**\n   * The function fired by the onClick event.\n   */\n  onClick: () => void\n  /**\n   * The function fired by the onDoubleClick event.\n   */\n  onDoubleClick: () => void\n  /**\n   * The react-column-select theme object.\n   */\n  theme: Theme\n}\n\nconst Option: FC<OptionProps> = ({\n  label,\n  isSelected,\n  onClick,\n  onDoubleClick,\n  theme,\n}) => {\n  return (\n    <Row\n      aria-label={label}\n      onClick={(e) => {\n        e.preventDefault()\n        onClick()\n      }}\n      onDoubleClick={onDoubleClick}\n      isSelected={isSelected}\n      role='button'\n      theme={theme}\n    >\n      {label}\n    </Row>\n  )\n}\n\nexport default Option\n","import styled from '@emotion/styled'\nimport type { Theme } from '../../types'\n\nexport const Button = styled.button<{ marginTop?: string; theme: Theme }>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  white-space: nowrap;\n  vertical-align: middle;\n  outline: none;\n  width: 100%;\n  border: 0;\n  transition: all 250ms;\n  padding: 0.6rem 0;\n  border-radius: 2px;\n  margin-top: ${({ marginTop }) => marginTop};\n  background-color: ${({ theme }) => theme.buttonBgColor};\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.buttonHoverBgColor};\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n`\n\nexport const ButtonIcon = styled.div<{ margin: string }>`\n  display: inline-flex;\n  align-self: center;\n  flex-shrink: 0;\n  margin: ${({ margin }) => margin};\n`\n","import React, { FC, ReactElement } from 'react'\nimport type { Theme } from '../../types'\nimport { Button as StyledButton, ButtonIcon } from './button.styles'\n\ninterface ButtonProps {\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type ReactElement\n   */\n  leftIcon?: ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type ReactElement\n   */\n  rightIcon?: ReactElement\n  /**\n   * If added, the button will show an icon instead of the button's label.\n   * @type ReactElement\n   */\n  centerIcon?: ReactElement\n  /**\n   * The text show in the button.\n   */\n  label: string\n  /**\n   * The top margin spacing of the button.\n   */\n  marginTop?: string\n  /**\n   * The html button type to use.\n   * @default 'button'\n   */\n  type?: 'button' | 'reset' | 'submit'\n  /**\n   * Is the button disabled?.\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * The react-column-select theme object.\n   */\n  theme: Theme\n  /**\n   * The function to be fired by the button onClick event.\n   */\n  onClick: () => void\n}\n\nconst Button: FC<ButtonProps> = ({\n  leftIcon,\n  rightIcon,\n  centerIcon,\n  label,\n  marginTop,\n  type = 'button',\n  isDisabled,\n  onClick,\n  theme,\n}) => {\n  return (\n    <StyledButton\n      id={label.replace(/\\W/g, '_')}\n      aria-label={label}\n      onClick={onClick}\n      marginTop={marginTop}\n      disabled={isDisabled}\n      aria-disabled={isDisabled}\n      theme={theme}\n      type={type}\n    >\n      {leftIcon && <ButtonIcon margin='0 0.25rem 0 0'>{leftIcon}</ButtonIcon>}\n      {centerIcon ? centerIcon : label}\n      {rightIcon && <ButtonIcon margin='0 0 0 0.25rem'>{rightIcon}</ButtonIcon>}\n    </StyledButton>\n  )\n}\n\nexport default Button\n","import React, { FC } from 'react'\n\n/**\n * Icons by Heroicons\n * https://github.com/tailwindlabs/heroicons\n */\n\nconst UpIcon: FC = () => (\n  <svg\n    stroke='currentColor'\n    fill='currentColor'\n    strokeWidth='0'\n    viewBox='0 0 20 20'\n    height='1em'\n    width='1em'\n    xmlns='http://www.w3.org/2000/svg'\n  >\n    <path\n      fillRule='evenodd'\n      d='M14.7071 12.7071C14.3166 13.0976 13.6834 13.0976 13.2929 12.7071L10 9.41421L6.70711 12.7071C6.31658 13.0976 5.68342 13.0976 5.29289 12.7071C4.90237 12.3166 4.90237 11.6834 5.29289 11.2929L9.29289 7.29289C9.68342 6.90237 10.3166 6.90237 10.7071 7.29289L14.7071 11.2929C15.0976 11.6834 15.0976 12.3166 14.7071 12.7071Z'\n      clipRule='evenodd'\n    />\n  </svg>\n)\n\nexport default UpIcon\n","import React, { FC } from 'react'\n\n/**\n * Icons by Heroicons\n * https://github.com/tailwindlabs/heroicons\n */\n\nconst DownIcon: FC = () => (\n  <svg\n    stroke='currentColor'\n    fill='currentColor'\n    strokeWidth='0'\n    viewBox='0 0 20 20'\n    height='1em'\n    width='1em'\n    xmlns='http://www.w3.org/2000/svg'\n  >\n    <path\n      fillRule='evenodd'\n      d='M5.29289 7.29289C5.68342 6.90237 6.31658 6.90237 6.70711 7.29289L10 10.5858L13.2929 7.29289C13.6834 6.90237 14.3166 6.90237 14.7071 7.29289C15.0976 7.68342 15.0976 8.31658 14.7071 8.70711L10.7071 12.7071C10.3166 13.0976 9.68342 13.0976 9.29289 12.7071L5.29289 8.70711C4.90237 8.31658 4.90237 7.68342 5.29289 7.29289Z'\n      clipRule='evenodd'\n    />\n  </svg>\n)\n\nexport default DownIcon\n","import React, { FC, useState, KeyboardEvent, ChangeEvent, useMemo } from 'react'\nimport {\n  Grid,\n  GridItemHeaderLeft,\n  GridItemHeaderRight,\n  GridItemCenter,\n  GridItemColumnLeft,\n  GridItemColumnRight,\n  Input,\n  Text,\n} from './container.style'\nimport type {\n  ColumnType,\n  OptionType,\n  OptionsType,\n  Theme,\n  ButtonText,\n} from '../../types'\nimport Column from '../column/column'\nimport Option from '../option/option'\nimport Button from '../button/button'\nimport { UpIcon, DownIcon } from '../icons'\n\ninterface ContainerProps {\n  /**\n   * The header text of the left column.\n   */\n  leftHeader?: string\n  /**\n   * The header text of the right column.\n   */\n  rightHeader?: string\n  /**\n   * The currently selected option.\n   */\n  current: OptionType\n  /**\n   * The function to set the current option.\n   */\n  select: (option: OptionType) => void\n  /**\n   * The function to select an option.\n   */\n  add: () => void\n  /**\n   * The function to remove a selected option.\n   */\n  remove: () => void\n  /**\n   * The function to select all options.\n   */\n  addAll: () => void\n  /**\n   * The function to remove all selected options.\n   */\n  removeAll: () => void\n  /**\n   * The function to move selected option up.\n   */\n  moveUp: () => void\n  /**\n   * The function to move selected option down.\n   */\n  moveDown: () => void\n  /**\n   * The available select options.\n   */\n  options: OptionsType\n  /**\n   * The selected options.\n   */\n  selected: OptionsType\n  /**\n   * Truthy if the selected options >= max allowed options.\n   */\n  isMax: boolean\n  /**\n   * Disables the \"add all\" button if the available options > max allowed options.\n   */\n  disableAddAll: boolean\n  /**\n   * The function to go to next option.\n   */\n  onNext: (column: ColumnType) => void\n  /**\n   * The function to go to previous option.\n   */\n  onPrevious: (column: ColumnType) => void\n  /**\n   * Enable to make the columns searchable.\n   */\n  isSearchable?: boolean\n  /**\n   * The placeholder string for the search inputs.\n   */\n  searchPlaceholder?: string\n  /**\n   * Disable the \"Add All\" and \"Remove All\" buttons.\n   * @default false\n   */\n  disableAllButtons?: boolean\n  /**\n   * Disable double clicking to add/remove a list option.\n   */\n  disableDoubleClick?: boolean\n  /**\n   * Disable keyboard navigation between list options.\n   */\n  disableKeyboard?: boolean\n  /**\n   * The react-column-select theme object.\n   */\n  theme: Theme\n  /**\n   * The react-column-select button text object.\n   */\n  buttonText: ButtonText\n}\n\nconst Container: FC<ContainerProps> = ({\n  leftHeader,\n  rightHeader,\n  current,\n  select,\n  add,\n  addAll,\n  remove,\n  removeAll,\n  moveUp,\n  moveDown,\n  options,\n  selected,\n  isMax,\n  disableAddAll,\n  onNext,\n  onPrevious,\n  isSearchable = false,\n  searchPlaceholder,\n  disableAllButtons,\n  disableDoubleClick,\n  disableKeyboard,\n  theme,\n  buttonText,\n}) => {\n  const [search, setSearch] = useState({ left: '', right: '' })\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearch({ ...search, [e.target.name]: e.target.value })\n  }\n\n  const handleKeyPress = (\n    e: KeyboardEvent<HTMLDivElement>,\n    column: ColumnType\n  ) => {\n    const currentActive = document.activeElement\n\n    if (e.key === 'ArrowDown') {\n      onNext(column)\n      ;(currentActive?.nextElementSibling as HTMLElement)?.focus()\n    }\n    if (e.key === 'ArrowUp') {\n      onPrevious(column)\n      ;(currentActive?.previousElementSibling as HTMLElement)?.focus()\n    }\n  }\n\n  const filteredOptions = useMemo(\n    () =>\n      isSearchable\n        ? options.filter((o: OptionType) =>\n            o.label\n              .toLocaleLowerCase()\n              .includes(search.left.toLocaleLowerCase())\n          )\n        : options,\n    [options, search.left]\n  )\n\n  const filteredSelected = useMemo(\n    () =>\n      isSearchable\n        ? selected.filter((s: OptionType) =>\n            s.label\n              .toLocaleLowerCase()\n              .includes(search.right.toLocaleLowerCase())\n          )\n        : selected,\n    [selected, search.right]\n  )\n\n  const sortOptions = (a: OptionType, b: OptionType) => {\n    if (a.label > b.label) return 1\n    if (a.label < b.label) return 0\n    return -1\n  }\n\n  return (\n    <Grid>\n      <GridItemColumnLeft\n        theme={theme}\n        onKeyDown={(e: KeyboardEvent<HTMLDivElement>) =>\n          disableKeyboard ? null : handleKeyPress(e, 'options')\n        }\n      >\n        <GridItemHeaderLeft theme={theme}>\n          <Text>{leftHeader || 'Options'}</Text>\n        </GridItemHeaderLeft>\n        {isSearchable && (\n          <Input\n            id='left-search'\n            name='left'\n            placeholder={searchPlaceholder ?? 'Search ...'}\n            value={search.left}\n            onChange={handleOnChange}\n            type='search'\n            theme={theme}\n          />\n        )}\n        <Column id='left-column' isSearchable={isSearchable}>\n          {filteredOptions.sort(sortOptions).map((option) => (\n            <Option\n              key={`l-${option.value}`}\n              theme={theme}\n              label={option.label}\n              isSelected={option.value === current?.value}\n              onClick={() => select(option)}\n              onDoubleClick={() => (disableDoubleClick ? null : add())}\n            />\n          ))}\n        </Column>\n      </GridItemColumnLeft>\n      <GridItemCenter>\n        <Button\n          type='button'\n          onClick={add}\n          label={buttonText.add}\n          isDisabled={!options.length || isMax}\n          theme={theme}\n        />\n        {!disableAllButtons && (\n          <Button\n            type='button'\n            label={buttonText.addAll}\n            onClick={addAll}\n            marginTop='0.5rem'\n            isDisabled={!options.length || disableAddAll}\n            theme={theme}\n          />\n        )}\n        <Button\n          type='button'\n          centerIcon={<UpIcon />}\n          onClick={moveUp}\n          marginTop='1.5rem'\n          theme={theme}\n          label='Move Up'\n        />\n        <Button\n          type='button'\n          centerIcon={<DownIcon />}\n          onClick={moveDown}\n          marginTop='0.5rem'\n          theme={theme}\n          label='Move Down'\n        />\n        <Button\n          type='button'\n          label={buttonText.remove}\n          onClick={remove}\n          marginTop='1.5rem'\n          isDisabled={!selected.length}\n          theme={theme}\n        />\n        {!disableAllButtons && (\n          <Button\n            type='button'\n            label={buttonText.removeAll}\n            onClick={removeAll}\n            marginTop='0.5rem'\n            isDisabled={!selected.length}\n            theme={theme}\n          />\n        )}\n      </GridItemCenter>\n      <GridItemColumnRight\n        theme={theme}\n        onKeyDown={(e: KeyboardEvent<HTMLDivElement>) =>\n          disableKeyboard ? null : handleKeyPress(e, 'selected')\n        }\n      >\n        <GridItemHeaderRight theme={theme}>\n          <Text>{rightHeader || 'Selected'}</Text>\n        </GridItemHeaderRight>\n        {isSearchable && (\n          <Input\n            id='right-search'\n            name='right'\n            placeholder={searchPlaceholder ?? 'Search ...'}\n            value={search.right}\n            onChange={handleOnChange}\n            type='search'\n            theme={theme}\n          />\n        )}\n        <Column id='right-column' isSearchable={isSearchable}>\n          {filteredSelected.map((option) => (\n            <Option\n              key={`r-${option.value}`}\n              theme={theme}\n              label={option.label}\n              isSelected={option.value === current?.value}\n              onClick={() => select(option)}\n              onDoubleClick={() => (disableDoubleClick ? null : remove())}\n            />\n          ))}\n        </Column>\n      </GridItemColumnRight>\n    </Grid>\n  )\n}\n\nexport default Container\n","import React, { FC, useEffect, useMemo, useState } from 'react'\nimport Container from './components/container/container'\nimport type {\n  OptionType,\n  Theme,\n  ColumnType,\n  OptionsType,\n  ActionMeta,\n  ActionTypes,\n  ButtonText,\n} from './types'\n\ninterface ColumnSelectProps {\n  /**\n   * The array of available select options.\n   */\n  options: OptionsType\n  /**\n   * The function called on change.\n   */\n  onChange: (values: OptionsType, actionMeta: ActionMeta) => void\n  /**\n   * Set the initial selected values.\n   */\n  defaultValue?: OptionsType\n  /**\n   * Set the maximum number of options that can be selected.\n   */\n  max?: number\n  /**\n   * The header text of the left column.\n   * @default 'Options'\n   */\n  leftHeader?: string\n  /**\n   * The header text of the right column.\n   * @default 'Selected'\n   */\n  rightHeader?: string\n  /**\n   * Enable to make the columns searchable.\n   * @default false\n   */\n  isSearchable?: boolean\n  /**\n   * The placeholder string for the search inputs.\n   * @default 'Search ...'\n   */\n  searchPlaceholder?: string\n  /**\n   * Disable the \"Add All\" and \"Remove All\" buttons.\n   * @default false\n   */\n  disableAllButtons?: boolean\n  /**\n   * Disable double clicking to add/remove a list option.\n   * @default false\n   */\n  disableDoubleClick?: boolean\n  /**\n   * Disable keyboard navigation on the list of options.\n   * @default false\n   */\n  disableKeyboard?: boolean\n  /**\n   * The react-column-select theme object.\n   */\n  theme?: Theme\n  /**\n   * The react-column-select button text.\n   */\n  buttonText?: ButtonText\n}\n\nconst ColumnSelect: FC<ColumnSelectProps> = ({\n  options,\n  onChange,\n  defaultValue = [],\n  max,\n  leftHeader,\n  rightHeader,\n  isSearchable,\n  searchPlaceholder,\n  disableAllButtons,\n  disableDoubleClick,\n  disableKeyboard,\n  theme,\n  buttonText,\n}) => {\n  const [selectOptions, setSelectOptions] = useState<OptionsType>(\n    options.filter((o) => !defaultValue.find((d) => d.value === o.value))\n  )\n  const [current, setCurrent] = useState<OptionType>(options[0])\n  const [selectedOptions, setSelectedOptions] =\n    useState<OptionsType>(defaultValue)\n  const [currentAction, setCurrentAction] = useState<ActionTypes>()\n\n  const isMax = useMemo(\n    () => (max ? selectedOptions.length >= max : false),\n    [selectedOptions]\n  )\n\n  const disableAddAll = useMemo(\n    () => (max ? selectOptions.length > max : false),\n    [max]\n  )\n\n  useEffect(() => {\n    if (currentAction) {\n      onChange(selectedOptions, { action: currentAction })\n    }\n  }, [selectedOptions])\n\n  const add = () => {\n    if (selectedOptions.find((c) => c.value === current.value) || isMax) return\n    setSelectOptions(selectOptions.filter((o) => o.value !== current.value))\n    setSelectedOptions([...selectedOptions, current])\n\n    setCurrentAction('add')\n  }\n\n  const addAll = () => {\n    if (!selectOptions.length) return\n    setSelectedOptions([...selectedOptions, ...selectOptions])\n    setCurrent(selectOptions[0])\n    setSelectOptions([])\n\n    setCurrentAction('add-all')\n  }\n\n  const remove = () => {\n    if (selectOptions.find((c) => c.value === current.value)) return\n    setSelectedOptions(selectedOptions.filter((o) => o.value !== current.value))\n    setSelectOptions([...selectOptions, current])\n\n    setCurrentAction('remove')\n  }\n\n  const removeAll = () => {\n    if (!selectedOptions.length) return\n    setSelectOptions([...selectOptions, ...selectedOptions])\n    setCurrent(selectedOptions[0])\n    setSelectedOptions([])\n\n    setCurrentAction('remove-all')\n  }\n\n  const moveUp = () => {\n    if (!selectOptions.includes(current)) {\n      const options = [...selectedOptions]\n      const oldIndex = options.findIndex((opt) => opt.value === current.value)\n      if (oldIndex === 0) return\n\n      const prevOption = options[oldIndex - 1]\n      options[oldIndex - 1] = current\n      options[oldIndex] = prevOption\n\n      setSelectedOptions(options)\n\n      setCurrentAction('move-up')\n    }\n  }\n\n  const moveDown = () => {\n    if (!selectOptions.includes(current)) {\n      const options = [...selectedOptions]\n      const oldIndex = options.findIndex((opt) => opt.value === current.value)\n      if (oldIndex === selectedOptions.length - 1) return\n\n      const prevOption = options[oldIndex + 1]\n      options[oldIndex + 1] = current\n      options[oldIndex] = prevOption\n\n      setSelectedOptions(options)\n\n      setCurrentAction('move-down')\n    }\n  }\n\n  const handleNext = (column: ColumnType) => {\n    const isOptionsCol = column === 'options'\n    const options = isOptionsCol ? selectOptions : selectedOptions\n\n    const currentIndex = options.findIndex((o) => o.value === current.value)\n\n    if (currentIndex !== options.length - 1) {\n      setCurrent(options[currentIndex + 1])\n    }\n  }\n\n  const handlePrevious = (column: ColumnType) => {\n    const isOptionsCol = column === 'options'\n    const options = isOptionsCol ? selectOptions : selectedOptions\n\n    const currentIndex = options.findIndex((o) => o.value === current.value)\n    if (currentIndex !== 0) {\n      setCurrent(options[currentIndex - 1])\n    }\n  }\n\n  const customTheme = Object.assign(\n    {\n      headerBgColor: '#FFFFFF',\n      columnBorderColor: '#CFA4FF',\n      textColor: '#000000',\n      columnBgColor: '#CBD5E0',\n      buttonBgColor: '#CBD5E0',\n      buttonHoverBgColor: '#CBD5E098',\n      searchFocusBorderColor: '#805Ad5',\n      optionHoverBgColor: '#F2F2F2',\n      optionSelectedBgColor: '#DDDCDC',\n    },\n    theme\n  )\n\n  const customButtonText = Object.assign(\n    {\n      add: 'Add',\n      addAll: 'Add all',\n      remove: 'Remove',\n      removeAll: 'Remove all',\n    },\n    buttonText\n  )\n\n  return (\n    <Container\n      leftHeader={leftHeader}\n      rightHeader={rightHeader}\n      current={current}\n      select={(option: OptionType) => setCurrent(option)}\n      add={add}\n      addAll={addAll}\n      remove={remove}\n      removeAll={removeAll}\n      moveUp={moveUp}\n      moveDown={moveDown}\n      options={selectOptions}\n      selected={selectedOptions}\n      isMax={isMax}\n      disableAddAll={disableAddAll}\n      onNext={handleNext}\n      onPrevious={handlePrevious}\n      isSearchable={isSearchable}\n      searchPlaceholder={searchPlaceholder}\n      disableAllButtons={disableAllButtons}\n      disableDoubleClick={disableDoubleClick}\n      disableKeyboard={disableKeyboard}\n      theme={customTheme}\n      buttonText={customButtonText}\n    />\n  )\n}\n\nexport default ColumnSelect\n"],"names":["Grid","styled","div","GridItemHeaderLeft","_a","headerBgColor","columnBorderColor","GridItemHeaderRight","GridItemCenter","GridItemColumnLeft","GridItemColumnRight","Input","input","searchFocusBorderColor","Text","p","VStack","Column","id","isSearchable","children","React","Row","button","optionSelectedBgColor","optionHoverBgColor","Option","label","isSelected","onClick","onDoubleClick","theme","e","preventDefault","role","Button","buttonBgColor","buttonHoverBgColor","ButtonIcon","leftIcon","rightIcon","centerIcon","marginTop","_b","type","isDisabled","StyledButton","replace","disabled","margin","UpIcon","stroke","fill","strokeWidth","viewBox","height","width","xmlns","fillRule","d","clipRule","DownIcon","Container","leftHeader","rightHeader","current","select","add","addAll","remove","removeAll","moveUp","moveDown","options","selected","isMax","disableAddAll","onNext","onPrevious","searchPlaceholder","disableAllButtons","disableDoubleClick","disableKeyboard","buttonText","_c","useState","left","right","search","setSearch","handleOnChange","target","name","value","handleKeyPress","column","currentActive","document","activeElement","key","nextElementSibling","focus","previousElementSibling","filteredOptions","useMemo","filter","o","toLocaleLowerCase","includes","filteredSelected","s","onKeyDown","placeholder","onChange","sort","a","b","map","option","length","defaultValue","max","find","selectOptions","setSelectOptions","_d","setCurrent","_e","selectedOptions","setSelectedOptions","_f","currentAction","setCurrentAction","useEffect","action","customTheme","Object","assign","textColor","columnBgColor","customButtonText","c","options_1","oldIndex","findIndex","opt","prevOption","options_2","currentIndex"],"mappings":"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"}